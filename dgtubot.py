from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram import F
from  sqlite3 import  connect
from aiogram.filters.command import Command
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
import requests
import re

bot1 = Bot('6326825722:AAEpqSunJLVtjehwam1w5kUCE-Tl0ue3l7Y')
dp = Dispatcher()
'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'''
def response_rasp(name_group, data):

    group = name_group
    data = "2023-" + data.replace("." , "-").replace(" ", "-")
    groups = {}
    url_responce = 'https://edu.donstu.ru/api/raspGrouplist'
    grouplist = requests.get(url_responce)
    info = grouplist.json()

    for i in info["data"]:
        groups.update({i["name"] : i["id"]})
    url = "https://edu.donstu.ru/api/Rasp?idGroup=" + str(groups[group.upper()]) + "&sdate=" + data
    response = requests.get(url)
    rasp = response.json()

    message = ""
    for i in range(0, len(rasp["data"]["rasp"])):
        if rasp["data"]["rasp"][i]["–¥–∞—Ç–∞"] == str(data) + "T00:00:00":
            message += f"–ü–∞—Ä–∞ ‚Ññ{rasp['data']['rasp'][i]['–Ω–æ–º–µ—Ä–ó–∞–Ω—è—Ç–∏—è']}\nüóí –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {rasp['data']['rasp'][i]['–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞']}\nüë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {rasp['data']['rasp'][i]['–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']}\nüï∞ –ù–∞—á–∞–ª–æ –≤ {rasp['data']['rasp'][i]['–Ω–∞—á–∞–ª–æ']} –¥–æ {rasp['data']['rasp'][i]['–∫–æ–Ω–µ—Ü']}\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: {rasp['data']['rasp'][i]['–∞—É–¥–∏—Ç–æ—Ä–∏—è']}\n\n"
    if message == '':
        return '–≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –¥–∞–ª–µ–µ –∏–ª–∏ –Ω–∞–∑–∞–¥'
    return message
'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –µ–¥—É –¥–æ–Ω—Ç—Å—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞'''
def edu_reg(surname,name,patronymic,credit_book,email):
    data = {}
    session = requests.Session()
    session.post('https://edu.donstu.ru/Account/Register.aspx',data=data)
    
@dp.message(Command('start'))
async def start(message:types.Message):
    '''–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –±–¥ –∏ –¥–æ–±–æ–≤–ª—è–µ–º –≤ –Ω–µ–µ —Å—Ä–∞–∑—É –ò–º—è –∏ –∞–π–¥–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º'''
    db = connect('first.db')
    curs = db.cursor()
    curs.execute('CREATE TABLE IF NOT EXISTS user1 (tg_id TEXT,name TEXT,Surname TEXT,patronymic TEXT,email TEXT,book TEXT,password TEXT)')
    db.commit()
    curs.execute(f'INSERT INTO user1 (tg_id,name) VALUES ({message.from_user.id},"{message.from_user.first_name}")')
    db.commit()
    
    curs.close()
    db.close()
    builder = InlineKeyboardBuilder()
    btn = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –¥–≥—Ç—É',callback_data='site')
    builder.row(btn)
    builder.row(types.InlineKeyboardButton(text='–ø–æ–¥—Ä–æ–±–Ω–µ–µ',callback_data='info'))
    await message.answer('–ü—Ä–∏–≤–µ—Ç –ø–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫ —è - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫!\n –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç –î–ì–¢–£ –∏–ª–∏ –Ω–∞–∂–º–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.',reply_markup=builder.as_markup())
@dp.message(F.text==r'\d{7}(\w+)')
async def mess(message:types.Message):
    text = message.text.split()
    print(1)
    db = connect('first.db')
    curs = db.cursor()
    curs.execute(f'UPDATE user1 SET book = "{text[0]}" WHERE tg_id={message.from_user.id}')
    db.commit()
    curs.execute(f'UPDATE user1 SET password = "{text[1]}" WHERE tg_id={message.from_user.id}')
    curs.close()
    db.close()
'''–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ edu dontsu(—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞)'''
@dp.message(F.text=='gjg')
async def reg(message:types.Message):
    global data
    global group
    flag = False
    text = message.text.split()
    data = [text[-1][0:2],text[-1][3:]]
    group = text[0]
    ent = message.entities
    '''–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å email - —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–¥ –∑–∞—á–µ—Ç–∫—É ,–ø–æ—á—Ç—É,—Ñ–∞–º–∏–ª–∏—é,–æ—Ç—á–µ—Å—Ç–≤–æ. –°–º–æ—Ç—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π callback_query '''
    if ent != None:
        for item in ent:
            if item.type == 'email':
                flag = True
                await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!')
    '''–¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–¥ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'''
    if flag == True:
        db = connect('first.db')
        curs = db.cursor()
        curs.execute(f'UPDATE user1 SET book = "{text[4].capitalize()}" WHERE tg_id={message.from_user.id}')
        db.commit()
        curs.execute(f'UPDATE user1 SET email = "{text[3]}" WHERE tg_id={message.from_user.id}')
        db.commit()
        curs.execute(f'UPDATE user1 SET patronymic = "{text[2].capitalize()}" WHERE tg_id={message.from_user.id}')
        db.commit()
        curs.execute(f'UPDATE user1 SET Surname = "{text[0].capitalize()}" WHERE tg_id={message.from_user.id}')
        

        db.commit()
        curs.close()
        db.close()

    else:
        '''–∏–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'''
        build = InlineKeyboardBuilder()
        build.row(types.InlineKeyboardButton(text='–Ω–∞–∑–∞–¥',callback_data='nazad'),types.InlineKeyboardButton(text='–¥–∞–ª–µ–µ',callback_data='next'))
        build.row(types.InlineKeyboardButton(text='–º–µ–Ω—é',callback_data='menu'))
        await message.answer(response_rasp(text[0],text[1]),reply_markup=build.as_markup())

'''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'''
@dp.callback_query(F.data == 'site')
async def callback(call):
    markup = InlineKeyboardBuilder()
    markup.row(types.InlineKeyboardButton(text='–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç',url='https://donstu.ru/'))
    markup.row(types.InlineKeyboardButton(text='edu.dontsu',url='https://edu.donstu.ru'),types.InlineKeyboardButton(text='–ú–æ–π –¥–≥—Ç—É',url='https://my.e.donstu.ru/admin/user/auth/Main'))
    markup.row(types.InlineKeyboardButton(text='–Ω–∞–∑–∞–¥',callback_data='menu'))
    await call.message.edit_text(text='–í—ã–±–∏—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å–∞–π—Ç:',reply_markup=markup.as_markup())
async def main():
    await dp.start_polling(bot1)
'''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥'''
@dp.callback_query(F.data == 'menu')
async def menu(call):
    builder = InlineKeyboardBuilder()
    btn = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –¥–≥—Ç—É',callback_data='site')
    builder.add(btn)
    builder.row(types.InlineKeyboardButton(text='–ø–æ–¥—Ä–æ–±–Ω–µ–µ',callback_data='info'))
    await call.message.edit_text('–ü—Ä–∏–≤–µ—Ç –ø–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫ —è - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫!\n –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç –î–ì–¢–£ –∏–ª–∏ –Ω–∞–∂–º–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.',reply_markup=builder.as_markup())
'''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ'''
@dp.callback_query(F.data == 'info')
async def info(call):
    build = InlineKeyboardBuilder()
    build.row(types.InlineKeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',callback_data='rasp'))
    build.row(types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',callback_data='pam'))
    build.row(types.InlineKeyboardButton(text='–ó–∞–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å',callback_data='vopros'))
    build.row(types.InlineKeyboardButton(text='–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ',callback_data='reg'))
    build.row(types.InlineKeyboardButton(text='–ó–∞–ø–æ–º–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',callback_data='zap'))
    build.row(types.InlineKeyboardButton(text='–ù–∞–ø–æ–º–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',callback_data='nap'))

    await call.message.answer('–Ø –º–æ–≥—É –≤—Å–µ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ\n-–Ω–∞–ø–æ–º–Ω–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n-—Å–æ–æ–±—â–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n-–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —É—á–µ–±–µ\n –ï—â–µ —Ç—ã –º–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –∑–∞—á–µ—Ç–∫–∏ –∏ –ø–∞—Ä–æ–ª—å –æ—Ç edu dontsu.\n–Ø –Ω–∞–ø–æ–º–Ω—é –∏—Ö —Ç–µ–±–µ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É',reply_markup=build.as_markup())
'''–ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞'''
@dp.callback_query(F.data == 'rasp')
async def rasp(call):
    await call.message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–æ–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –∏ –¥–∞—Ç—É. –°–Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü –ø–æ—Ç–æ–º –¥–µ–Ω—å - **.**")
'''–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–º—è—Ç–∫—É.–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞'''
@dp.callback_query(F.data == 'pam')
async def func(call):
    pass
'''–ö–Ω–æ–ø–∫–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞'''
@dp.callback_query(F.data == 'vopros')
async def vopros(call):
    await call.message.answer('–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å,–Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n -—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ\n -—á—Ç–æ —Ç–∞–∫–æ–µ\n –∑–∞—á–µ–º\–¥–ª—è —á–µ–≥–æ\n-–∫–∞–∫\n–∏ –¥–∞–ª–µ–µ –ø–∏—à–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç')   
'''–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü—Ä–æ –º–æ–π –¥–≥—Ç—É –Ω–µ –ø–æ–Ω—è–ª, —Ç–∞–º –≤–æ–æ–±—â–µ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'''
@dp.callback_query(F.data == 'reg')
async def pam(call):
    markup = InlineKeyboardBuilder()
    markup.row(types.InlineKeyboardButton(text='edu.dontsu',callback_data='edu'),types.InlineKeyboardButton(text='–ú–æ–π –¥–≥—Ç—É',callback_data='Mydgtu'))
    await call.message.answer('–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ª—é–±–æ–π –∏–∑ —Å–∞–π—Ç–æ–≤ –î–ì–¢–£!\n –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–∞–π—Ç –Ω–∞ –∫–æ—Ç—Ä–æ–º —Ö–æ—á–µ—à—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è:',reply_markup=markup.as_markup())
'''–ö–Ω–æ–ø–∫–∞ "–µ–¥—É" –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'''
@dp.callback_query(F.data=='edu')
async def edu(call):
    await call.message.answer('–í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n-–§–∞–º–∏–ª–∏—è\n-–ò–º—è\n-–û—Ç—á–µ—Å—Ç–≤–æ\n-–ü–æ—á—Ç–∞\n-–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏ ')
'''–∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'''
@dp.callback_query(F.data=='nazad')
async def nazad_day(call):
    global data
    build = InlineKeyboardBuilder()
    build.row(types.InlineKeyboardButton(text='–Ω–∞–∑–∞–¥',callback_data='nazad'),types.InlineKeyboardButton(text='–¥–∞–ª–µ–µ',callback_data='next'))
    data[-1] = str(int(data[-1])- 1)
    build.row(types.InlineKeyboardButton(text='–º–µ–Ω—é',callback_data='menu'))
    await call.message.edit_text(response_rasp(group,'.'.join(data)),reply_markup=build.as_markup())
'''–∫–Ω–æ–ø–∫–∞ "–¥–∞–ª–µ–µ" –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'''
@dp.callback_query(F.data=='next')
async def next_day(call):
    global data
    build = InlineKeyboardBuilder()
    build.row(types.InlineKeyboardButton(text='–Ω–∞–∑–∞–¥',callback_data='nazad'),types.InlineKeyboardButton(text='–¥–∞–ª–µ–µ',callback_data='next'))
    data[-1] = str(int(data[-1])+ 1)
    build.row(types.InlineKeyboardButton(text='–º–µ–Ω—é',callback_data='menu'))
    await call.message.edit_text(response_rasp(group,'.'.join(data)),reply_markup=build.as_markup())
@dp.callback_query(F.data=='zap')
async def zap(call):
    await call.message.answer('–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏ –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
@dp.callback_query(F.data=='nap')
async def nap(call):
    print(call.from_user.id)
    db = connect('first.db')
    curs = db.cursor()
    for i in curs.execute('SELECT * FROM user1'):
        print(i)
        if int(i[0]) == int(call.from_user.id):
            await call.message.answer(f'–ó–∞—á–µ—Ç–∫–∞ - {i[-2]}\n –ø–∞—Ä–æ–ª—å –æ—Ç –µ–¥—É –¥–æ–Ω—Ç—Å—É - {i[-1]}')
            break
if __name__ == "__main__":
    asyncio.run(main())